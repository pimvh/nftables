---
systemd_failmail_email: "foo@example.com"

# rules put into chains
nftables_ruleset:
  "inet firewall":
    comment: "firewall of device"
    chains:
      input:
        - input_hook
        - valid_connections
        - loopback
        - drop_tcp_fragments
        - icmp
        - icmpv6
        - globally_allowed_tcp

nftables_dynamic_tables: {}

# some rules were inspired on:
# https://github.com/yoramvandevelde/nftables-example/blob/master/nftables-init.rules
nftables_rules:
  input_hook:
    def: type filter hook input priority 0; policy drop;
  valid_connections:
    def: |
      ct state established, related accept
      ct state invalid drop

  new_connections:
    def: ct state new accept

  loopback:
    def: |
      iif != lo ip  daddr 127.0.0.1/8 counter drop comment "drop fake loopback"
      iif != lo ip6 daddr ::1/128     counter drop
      meta iifname lo accept

  drop_tcp_fragments:
    def: |
      ip frag-off & 0x1fff != 0 counter drop comment "Drop all fragments"

  icmp:
    def: >-
      ip protocol icmp icmp type { destination-unreachable, echo-reply, echo-request, time-exceeded } limit rate 10/second burst 2 packets accept

  icmpv6:
    def: >-
      ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, echo-reply, echo-request, packet-too-big, parameter-problem, time-exceeded } limit rate 10/second burst 2 packets accept

  globally_allowed_tcp:
    def: |
      iifname $WAN_IF tcp dport $OPEN_TCP_PORTS ct state new accept
    depends_on:
      - tcp_ports

  globally_allowed_udp:
    def: |
      iifname $WAN_IF udp dport $OPEN_UDP_PORTS ct state new accept
    depends_on:
      - udp_ports

  locally_allowed_tcp:
    def: |
      ip  saddr $LOCAL_IPV4_RANGE ip  daddr $ASSIGNED_IPV4_RANGE tcp dport $LOCAL_OPEN_TCP_PORTS accept
      ip6 saddr $LOCAL_IPV6_RANGE ip6 daddr $ASSIGNED_IPV6_RANGE tcp dport $LOCAL_OPEN_TCP_PORTS accept
    depends_on:
      - local_network

nftables_variables:
  tcp_ports:
    comment: tcp ports configuration
    def: |
      {% if nftables_open_tcp_ports_global %}define OPEN_TCP_PORTS = { {{ nftables_open_tcp_ports_global | join(",") }} }{% endif +%}
      {% if nftables_open_tcp_ports_local %}define LOCAL_OPEN_TCP_PORTS = { {{ nftables_open_tcp_ports_local | join(",") }} }{% endif +%}
      {% if nftables_open_tcp_ports_vpn %}define VPN_TCP_PORTS = { {{ nftables_open_tcp_ports_vpn | join(",") }} }{% endif +%}

  udp_ports:
    comment: udp ports configuration
    def: |
      {% if nftables_open_udp_ports_global %}define OPEN_UDP_PORTS = { {{ nftables_open_udp_ports_global | join(",") }} }{% endif +%}
      {% if nftables_open_udp_ports_local %}define LOCAL_OPEN_UDP_PORTS = { {{ nftables_open_udp_ports_local | join(",") }} }{% endif +%}
      {% if nftables_open_udp_ports_vpn %}define VPN_UDP_PORTS = { {{ nftables_open_udp_ports_vpn | join(",") }} }{% endif +%}

  local_network:
    comment: local ranges in ipv4/ipv6
    def: |
      define LOCAL_IPV4_RANGE = { 10.0.0.0/8, 127.16.0.1/12, 192.168.0.0/16 }
      define LOCAL_IPV6_RANGE = { ::1/128 }

  interface:
    comment: define public interface
    def: |
      define WAN_IF = "eth0"

nftables_sets: |
  set denylist4 { type ipv4_addr;
                  flags dynamic, timeout;
                  timeout 5m; }
  set denylist6 { type ipv6_addr;
                  flags dynamic, timeout;
                  timeout 5m; }
