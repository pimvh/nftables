---
- name: Verify that required variables are defined
  assert:
    that:
      - "{{ item }} is defined"
      - "{{ item }} | length > 0"
      - "{{ item }} != None"
    fail_msg: "{{ item }} needs to be set for the role to work"
    success_msg: "Required variable {{ item }} is defined"
  changed_when: false
  diff: false
  loop:
    - nftables
    - nftables_dir
    - nft_script_folder
    - nft_loaded_variables

- name: Include rules from rules file
  include_vars:
    file: vars/rules.yaml
  when: not nft_rules

- name: Include variables from variables file
  include_vars:
    file: vars/variables.yaml
  when: not nft_variables

- name: Verify that all rules are defined
  assert:
    that:
      - "nft_rules.{{ item }} is defined"
      - "nft_rules.{{ item }} | length > 0"
      - "nft_rules.{{ item }} != None"
    fail_msg: "{{ item }} needs to be set for the role to work"
    success_msg: "Required variable {{ item }} is defined"
  changed_when: false
  diff: false
  loop: "{{ nftables | get_rule_names }}"

- name: Verify that all required variables are defined
  assert:
    that:
      - "nft_variables.{{ item }} is defined"
      - "nft_variables.{{ item }} | length > 0"
      - "nft_variables.{{ item }} != None"
    fail_msg: "{{ item }} needs to be set for the role to work"
    success_msg: "Required variable {{ item }} is defined"
  changed_when: no
  loop: "{{ nft_loaded_variables }}"

- name: install nftables and requirements for this role
  package:
    name:
      - nftables
      - python3-nftables
      - pip
    state: present
  become: true

- name: ensure firewall directory exists
  file:
    path: "{{ nftables_dir }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
  become: true

- name: list nft tables
  command: nft list tables
  become: true
  check_mode: false
  changed_when: false
  register: current_nft_tables

- name: Grab current nfttable names from output
  set_fact:
    nft_table_names: "{{ current_nft_tables.stdout_lines | map('regex_replace','^table\ ','') }}"

- name: Create tables that do not exist in nft (to avoid issues)
  command: "nft add table {{ table }}"
  become: true
  when: not table in nft_table_names
  loop: "{{ nftables.keys() }}"
  loop_control:
    loop_var: table

- name: Create dynamic tables that do not exist in nft (to avoid issues)
  command: "nft add table {{ table }}"
  become: true
  when: not table in nft_table_names
  loop: "{{ dynamic_nftables.keys() | list + ['inet blocklist'] }}"
  loop_control:
    loop_var: table

- name: Copy variable definitions nft file
  template:
    src: defines.nft.j2
    dest: "{{ nftables_dir }}/defines.nft"
    validate: /usr/sbin/nft -c -f %s
    mode: u=rw,g=r,o=
  become: true

- name: Copy sets definitions nft file
  template:
    src: filter_sets.nft.j2
    dest: "{{ nftables_dir }}/filter_sets.nft"
    mode: u=rw,g=r,o=
    # no validation will crash because this file is meant to be included in firewall.nft
  become: true

- name: create dynamic tables as empty tables that do not exist in nft to avoid issues
  template:
    src: empty_table.nft.j2
    dest: "{{ nftables_dir }}/{{ table | strip_family }}.nft"
    mode: u=rw,g=r,o=
  # crashes on validation due to dependencies,
  # gets validated as a whole when global file is pushed
  # validate: /usr/sbin/nft -c -f %s
  become: true
  # when table just got created
  when: not table in nft_table_names
  loop: "{{ dynamic_nftables.keys() }}"
  loop_control:
    loop_var: table

- name: create blocklist as empty table if it does not exist in nft to avoid issues
  template:
    src: blocklist.nft.j2
    dest: "{{ nftables_dir }}/blocklist.nft"
    mode: u=rw,g=r,o=
  # crashes on validation due to dependencies,
  # gets validated as a whole when global file is pushed
  # validate: /usr/sbin/nft -c -f %s
  become: true
  # when table just got created
  when: not "inet blocklist" in nft_table_names

- name: Copy all template nft files
  template:
    src: "table.nft.j2"
    dest: "{{ nftables_dir }}/{{ table | strip_family }}.nft"
    mode: u=rw,g=r,o=
    # crashes on validation due to dependencies,
    # gets validated as a whole when global file is pushed
    # validate: /usr/sbin/nft -c -f %s
  become: true
  loop: "{{ nftables.keys() }}"
  loop_control:
    loop_var: table

- name: Copy global nftable config file
  template:
    src: nftables.nft.j2
    dest: "{{ nftables_dir }}/nftables.nft"
    validate: /usr/sbin/nft -c -f %s
    mode: u=rw,g=r,o=
  become: true

- name: move firewall reloading script to lib
  template:
    src: reload_firewall.sh.j2
    dest: "{{ nft_script_folder }}/reload_firewall.sh"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  become: true

- name: reload nft ruleset
  command: "{{ nft_script_folder }}/reload_firewall.sh"
  become: true

- name: create nftables systemd directory
  file:
    dest: /etc/systemd/system/nftables.service.d
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  become: true

- name: copy nftables service file to edit it
  command: cp /lib/systemd/system/nftables.service /etc/systemd/system/nftables.service.d/override.conf
  become: true
  when: not ansible_check_mode

- name: edit nftables service to point to our main nftables file
  replace:
    path: /etc/systemd/system/nftables.service.d/override.conf
    regexp: \/etc\/nftables\.conf
    replace: '/etc/nftables/nftables.nft'
  become: true
  when: not ansible_check_mode

- name: enable nftables service
  service:
    name: nftables
    state: started
    enabled: yes
  when: enable_nftable_service
  become: true

- name: create abuseip_db based blocklist
  include_tasks: abuseip_blocklist.yaml
  when: abuseip_api_key is defined

- name: Uninstall iptables if present
  package:
    name: iptables
    state: absent
  become: true
  when: uninstall_iptables

